{"version":3,"sources":["components/Grid.js","components/Square.js","components/GridOfSquares.js","redux/actions.js","redux/actionTypes.js","components/DimensionsInput.js","containers/DevTools.js","App.js","serviceWorker.js","constants.js","redux/reducers/cells.js","redux/reducers/dimensions.js","redux/reducers/index.js","redux/store.js","index.js"],"names":["Grid","props","_this","Object","classCallCheck","this","_super","call","state","hidden","_this2","setTimeout","setState","waitBeforeImgVisible","react_default","a","createElement","onMouseDown","onMouseUp","className","concat","style","gridTemplateColumns","columns","gridTemplateRows","rows","backgroundImage","img","children","React","Component","Square","onMouseEnter","visible","GridOfSquares","squares","cells","map","square","i","components_Square","key","e","preventDefault","setShouldFlip","toggleCell","shouldFlipOnEnter","components_Grid","mapDispatchToProps","shouldFlip","type","payload","id","connect","dimensions","DimensionsInput","htmlFor","name","value","onChange","onDimensionsChange","target","dispatch","setDimensions","createDevTools","redux_devtools_dock_monitor_lib_default","toggleVisibilityKey","changePositionKey","defaultIsVisible","redux_devtools_log_monitor_lib_default","theme","App","components_GridOfSquares","components_DimensionsInput","DevTools","Boolean","window","location","hostname","match","DEFAULT_DIMENSIONS","initialState","Array","fill","copyCells","oldCells","newCells","length","cellsReducer","arguments","undefined","action","toConsumableArray","objectSpread2","Number","isInteger","dimensionsReducer","combineReducers","createStore","rootReducer","compose","instrument","render","es","store","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.3d8de6f4.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nclass Grid extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            hidden: true\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        setTimeout(() => {\r\n            this.setState({\r\n                hidden: false\r\n            });\r\n        }, this.props.waitBeforeImgVisible)\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div onMouseDown={this.props.onMouseDown} onMouseUp={this.props.onMouseUp}\r\n                className={`Grid${this.state.hidden ? ' imgHidden' : ''}`}\r\n                style={\r\n                    {\r\n                        gridTemplateColumns: `repeat(${this.props.columns}, 1fr)`,\r\n                        gridTemplateRows: `repeat(${this.props.rows}, 1fr)`,\r\n                        backgroundImage: `url(${this.props.img})`,\r\n                    }\r\n                }>\r\n                {this.props.children}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Grid;","import React from \"react\";\r\n\r\nclass Square extends React.Component {\r\n    render() {\r\n        return (\r\n            <div className=\"SquareWrapper\"\r\n                onMouseDown={this.props.onMouseDown}\r\n                onMouseUp={this.props.onMouseUp}\r\n                onMouseEnter={this.props.onMouseEnter}\r\n            >\r\n                <div className={`Square${this.props.visible ? ' shown' : ' hidden'}`}></div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Square;","import React from \"react\";\r\nimport Grid from \"./Grid\";\r\nimport Square from \"./Square\";\r\n\r\nimport { connect } from 'react-redux';\r\nimport { toggleCell, setShouldFlip } from '../redux/actions'\r\n\r\nclass GridOfSquares extends React.Component {\r\n    render() {\r\n        let squares = this.props.cells.map((square, i) => (\r\n            <Square key={i} visible={square}\r\n                onMouseDown={(e) => {\r\n                    e.preventDefault();\r\n                    this.props.setShouldFlip(true);\r\n                    this.props.toggleCell(i);\r\n                }}\r\n                onMouseEnter={() => {\r\n                    if (this.props.shouldFlipOnEnter) {\r\n                        this.props.toggleCell(i);\r\n                    }                    \r\n                }}\r\n                onMouseUp={() => {\r\n                    this.props.setShouldFlip(false);\r\n                }}\r\n            ></Square>\r\n        ));\r\n\r\n        return (\r\n            <Grid\r\n                waitBeforeImgVisible={700}\r\n                img=\"https://giantbomb1.cbsistatic.com/uploads/scale_small/0/6087/2437349-pikachu.png\"\r\n                columns={this.props.columns}\r\n                rows={this.props.rows}\r\n            >\r\n                {squares}\r\n            </Grid>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        cells: state.cells.cells,\r\n        columns: state.dimensions.columns,\r\n        rows: state.dimensions.rows,\r\n        shouldFlipOnEnter: state.cells.shouldFlip\r\n    };\r\n};\r\n\r\n// https://react-redux.js.org/using-react-redux/connect-mapdispatch#defining-mapdispatchtoprops-as-an-object\r\n// its easier to define it as a object and redux will take care of calling dispatch and creates appropriete objects for each action\r\n// const mapDispatchToProps = dispatch => {\r\n//     return {\r\n//         onSquareMouseDown: id => {\r\n//             dispatch(setShouldFlip(true));\r\n//             dispatch(toggleCell(id));\r\n//         },\r\n//         onSquareMouseUp: () => {\r\n//             dispatch(setShouldFlip(false));\r\n//         },\r\n//         onSquareMouseEnter: id => {\r\n//             dispatch(enteredCell(id));\r\n//         }\r\n//     }\r\n// };\r\nconst mapDispatchToProps = {\r\n    setShouldFlip, toggleCell\r\n};\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(GridOfSquares);\r\n","import { SET_DIMENSIONS, TOGGLE_CELL, SHOULD_FLIP } from \"./actionTypes\";\r\n\r\nexport const toggleCell = id => (\r\n    {\r\n        type: TOGGLE_CELL,\r\n        payload: {\r\n            id: id\r\n        }\r\n    }\r\n);\r\n\r\nexport const setShouldFlip = shouldFlip => ({\r\n    type: SHOULD_FLIP,\r\n    payload: {\r\n        shouldFlip: shouldFlip\r\n    }\r\n})\r\n\r\nexport const setDimensions = (rows, columns) => (\r\n    {\r\n        type: SET_DIMENSIONS,\r\n        payload: {\r\n            rows,\r\n            columns\r\n        }\r\n    }\r\n)\r\n","export const TOGGLE_CELL = \"TOGGLE_CELL\";\r\nexport const SHOULD_FLIP = \"SHOULD_FLIP\";\r\nexport const SET_DIMENSIONS = \"SET_DIMENSIONS\";","import React from \"react\";\r\nimport { connect } from 'react-redux';\r\nimport { setDimensions } from \"../redux/actions\";\r\n\r\nclass DimensionsInput extends React.Component {\r\n    render() {\r\n        return (\r\n            <form>\r\n                <label htmlFor=\"rows\">\r\n                    Rows\r\n                    <input name=\"rows\" id=\"rows\"\r\n                        type=\"number\"\r\n                        value={this.props.rows}\r\n                        onChange={\r\n                            e => {\r\n                                this.props.onDimensionsChange(e.target.value, this.props.columns)\r\n                            }\r\n                        } />\r\n                </label>\r\n\r\n                <label htmlFor=\"columns\">\r\n                    Columns\r\n                    <input name=\"columns\" id=\"columns\"\r\n                        type=\"number\"\r\n                        value={this.props.columns}\r\n                        onChange={\r\n                            e => {\r\n                                this.props.onDimensionsChange(this.props.rows, e.target.value)\r\n                            }\r\n                        } />\r\n                </label>\r\n            </form>\r\n        );\r\n    }\r\n}\r\n\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        columns: state.dimensions.columns,\r\n        rows: state.dimensions.rows,\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        onDimensionsChange: (rows, columns) => {\r\n            dispatch(setDimensions(rows, columns));\r\n        }\r\n    }\r\n};\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(DimensionsInput);\r\n","import React from 'react';\r\nimport { createDevTools } from 'redux-devtools';\r\nimport LogMonitor from 'redux-devtools-log-monitor';\r\nimport DockMonitor from 'redux-devtools-dock-monitor';\r\n\r\n/**\r\n * Create the DevTools component and export it.\r\n */\r\nexport default createDevTools(\r\n    <DockMonitor\r\n        /**\r\n         * Hide or show the dock with \"ctrl-h\".\r\n         */\r\n        toggleVisibilityKey='ctrl-h'\r\n        /**\r\n         * Change the position of the dock with \"ctrl-q\".\r\n         */\r\n        changePositionKey='ctrl-q'\r\n        defaultIsVisible={true}\r\n    >\r\n        <LogMonitor theme='tomorrow' />\r\n    </DockMonitor>\r\n);","import React from 'react';\r\nimport './App.css';\r\n\r\nimport GridOfSquares from \"./components/GridOfSquares\";\r\nimport DimensionsInput from \"./components/DimensionsInput\";\r\nimport DevTools from \"./containers/DevTools\";\r\n\r\n\r\nclass App extends React.Component {\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <GridOfSquares></GridOfSquares>\r\n        <DimensionsInput></DimensionsInput>\r\n        <DevTools/>\r\n      </div>\r\n    );\r\n  };\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","export const DEFAULT_DIMENSIONS = {\r\n    COLUMNS: 7,\r\n    ROWS: 6\r\n}","import {\r\n    TOGGLE_CELL, SHOULD_FLIP, SET_DIMENSIONS\r\n} from \"../actionTypes\"\r\nimport { DEFAULT_DIMENSIONS } from \"../../constants\";\r\n\r\nconst initialState = {\r\n    cells: Array(DEFAULT_DIMENSIONS.ROWS * DEFAULT_DIMENSIONS.COLUMNS).fill(true),\r\n    shouldFlip: false\r\n}\r\n\r\nconst toggleCell = (state, action) => {\r\n    const cells = [...state.cells];\r\n    const { payload: { id: i } } = action;\r\n\r\n    cells[i] = !cells[i];\r\n    return {\r\n        ...state,\r\n        cells\r\n    };\r\n}\r\n\r\nconst copyCells = (oldCells, rows, columns) => {\r\n    const newCells = Array(rows * columns).fill(true);\r\n\r\n    for (let i = 0; i < oldCells.length; i++) {\r\n        if (i === newCells.length) {\r\n            break;\r\n        }\r\n\r\n        newCells[i] = oldCells[i];\r\n    }\r\n\r\n    return newCells;\r\n}\r\n\r\nconst cellsReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case TOGGLE_CELL:\r\n            return toggleCell(state, action);\r\n        case SHOULD_FLIP:\r\n            return {\r\n                ...state,\r\n                shouldFlip: action.payload.shouldFlip\r\n            }\r\n        case SET_DIMENSIONS:\r\n            const rows = +action.payload.rows;\r\n            const columns = +action.payload.columns;\r\n\r\n            if (!Number.isInteger(rows) || rows < 0 || !Number.isInteger(columns) || columns < 0)\r\n                return state;\r\n\r\n            return {\r\n                ...state,\r\n                cells: copyCells(state.cells, rows, columns)\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport default cellsReducer;","import { SET_DIMENSIONS } from \"../actionTypes\"\r\nimport { DEFAULT_DIMENSIONS} from \"../../constants\";\r\n\r\nconst initialState = {\r\n    rows: DEFAULT_DIMENSIONS.ROWS,\r\n    columns: DEFAULT_DIMENSIONS.COLUMNS,\r\n};\r\n\r\nconst dimensionsReducer = (state = initialState, action) => {\r\n    switch (action.type) {        \r\n        case SET_DIMENSIONS:\r\n            const rows = +action.payload.rows;\r\n            const columns = +action.payload.columns;\r\n\r\n            if (!Number.isInteger(rows) || rows < 0 || !Number.isInteger(columns) || columns < 0)\r\n                return state;\r\n\r\n            return {\r\n                ...state,\r\n                rows,\r\n                columns\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport default dimensionsReducer;","import { combineReducers } from \"redux\";\r\nimport cells from \"./cells\";\r\nimport dimensions from \"./dimensions\";\r\n\r\nexport default combineReducers({ cells, dimensions });","import { createStore, compose } from 'redux';\r\nimport rootReducer from \"./reducers\";\r\nimport DevTools from \"../containers/DevTools\";\r\n\r\nexport default createStore(\r\n    rootReducer,\r\n    undefined, // initial state is handled in the reducers\r\n    compose(\r\n        // window.__REDUX_DEVTOOLS_EXTENSION__ ? window.__REDUX_DEVTOOLS_EXTENSION__() : f => f, // enables chrome redux extension\r\n        DevTools.instrument() // enables history directly inside app\r\n        // those two cannot be combine together\r\n    ) \r\n);","import React from 'react';\r\nimport { render } from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nimport { Provider } from 'react-redux';\r\nimport store from \"./redux/store\";\r\n\r\nrender(\r\n    <Provider store={store}>\r\n        <App />\r\n    </Provider>,\r\n    document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}